@page "/shelterevents/delete"
@using Microsoft.EntityFrameworkCore
@using DogAdoptionApp.Models
@inject IDbContextFactory<DogAdoptionApp.Data.DogAdoptionAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>ShelterEvent</h2>
    <hr />
    @if (shelterevent is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@shelterevent.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Year</dt>
            <dd class="col-sm-10">@shelterevent.Year</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Month</dt>
            <dd class="col-sm-10">@shelterevent.Month</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Day</dt>
            <dd class="col-sm-10">@shelterevent.Day</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Location</dt>
            <dd class="col-sm-10">@shelterevent.Location</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Time</dt>
            <dd class="col-sm-10">@shelterevent.Time</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@shelterevent.Description</dd>
        </dl>
        <EditForm method="post" Model="shelterevent" OnValidSubmit="DeleteShelterEvent" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(shelterevent is null)">Delete</button> |
            <a href="/shelterevents">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private ShelterEvent? shelterevent;

    [SupplyParameterFromQuery]
    private int ShelterEventID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        shelterevent = await context.ShelterEvent.FirstOrDefaultAsync(m => m.ShelterEventID == ShelterEventID);

        if (shelterevent is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteShelterEvent()
    {
        using var context = DbFactory.CreateDbContext();
        context.ShelterEvent.Remove(shelterevent!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/shelterevents");
    }
}
